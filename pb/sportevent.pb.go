// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportevent.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	sportevent.proto

It has these top-level messages:
	Event
	Response
	EventFilter
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sport int32

const (
	Sport_BASEBALL   Sport = 0
	Sport_BASKETBALL Sport = 1
	Sport_FOOTBALL   Sport = 2
	Sport_BOXING     Sport = 3
	Sport_GOLF       Sport = 4
	Sport_NASCAR     Sport = 5
	Sport_TENNIS     Sport = 6
)

var Sport_name = map[int32]string{
	0: "BASEBALL",
	1: "BASKETBALL",
	2: "FOOTBALL",
	3: "BOXING",
	4: "GOLF",
	5: "NASCAR",
	6: "TENNIS",
}
var Sport_value = map[string]int32{
	"BASEBALL":   0,
	"BASKETBALL": 1,
	"FOOTBALL":   2,
	"BOXING":     3,
	"GOLF":       4,
	"NASCAR":     5,
	"TENNIS":     6,
}

func (x Sport) String() string {
	return proto.EnumName(Sport_name, int32(x))
}
func (Sport) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event struct {
	Sport      Sport  `protobuf:"varint,1,opt,name=sport,enum=pb.Sport" json:"sport,omitempty"`
	MatchTitle string `protobuf:"bytes,2,opt,name=match_title,json=matchTitle" json:"match_title,omitempty"`
	DataEvent  string `protobuf:"bytes,3,opt,name=data_event,json=dataEvent" json:"data_event,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetSport() Sport {
	if m != nil {
		return m.Sport
	}
	return Sport_BASEBALL
}

func (m *Event) GetMatchTitle() string {
	if m != nil {
		return m.MatchTitle
	}
	return ""
}

func (m *Event) GetDataEvent() string {
	if m != nil {
		return m.DataEvent
	}
	return ""
}

type Response struct {
	IsSuccess bool   `protobuf:"varint,1,opt,name=is_success,json=isSuccess" json:"is_success,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EventFilter struct {
	EventId     string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AggregateId string `protobuf:"bytes,2,opt,name=aggregate_id,json=aggregateId" json:"aggregate_id,omitempty"`
}

func (m *EventFilter) Reset()                    { *m = EventFilter{} }
func (m *EventFilter) String() string            { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()               {}
func (*EventFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EventFilter) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EventFilter) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "pb.Event")
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterType((*EventFilter)(nil), "pb.EventFilter")
	proto.RegisterEnum("pb.Sport", Sport_name, Sport_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SportsEvent service

type SportsEventClient interface {
	// Get all events for the given aggregate and event
	GetEvents(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (*Response, error)
	// Create a new event to the event store
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error)
}

type sportsEventClient struct {
	cc *grpc.ClientConn
}

func NewSportsEventClient(cc *grpc.ClientConn) SportsEventClient {
	return &sportsEventClient{cc}
}

func (c *sportsEventClient) GetEvents(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pb.SportsEvent/GetEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsEventClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pb.SportsEvent/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SportsEvent service

type SportsEventServer interface {
	// Get all events for the given aggregate and event
	GetEvents(context.Context, *EventFilter) (*Response, error)
	// Create a new event to the event store
	CreateEvent(context.Context, *Event) (*Response, error)
}

func RegisterSportsEventServer(s *grpc.Server, srv SportsEventServer) {
	s.RegisterService(&_SportsEvent_serviceDesc, srv)
}

func _SportsEvent_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsEventServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SportsEvent/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsEventServer).GetEvents(ctx, req.(*EventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsEvent_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsEventServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SportsEvent/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsEventServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _SportsEvent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SportsEvent",
	HandlerType: (*SportsEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _SportsEvent_GetEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _SportsEvent_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sportevent.proto",
}

func init() { proto.RegisterFile("sportevent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x41, 0x6b, 0xfa, 0x40,
	0x10, 0xc5, 0x8d, 0x1a, 0xff, 0xc9, 0x44, 0xfc, 0x87, 0xa5, 0x07, 0x5b, 0x28, 0xda, 0x9c, 0xa4,
	0x14, 0x0f, 0xf6, 0x03, 0x94, 0x44, 0xa2, 0x04, 0x25, 0x81, 0xc4, 0x43, 0x6f, 0x61, 0x35, 0x83,
	0x06, 0xac, 0x09, 0xbb, 0xdb, 0x7e, 0xfe, 0xb2, 0xb3, 0x56, 0x4a, 0x6f, 0xf3, 0x7e, 0xf3, 0x76,
	0x1e, 0x33, 0x0b, 0xbe, 0x6c, 0x1b, 0xa1, 0xf0, 0x0b, 0x2f, 0x6a, 0xde, 0x8a, 0x46, 0x35, 0xac,
	0xdb, 0xee, 0x83, 0x13, 0xd8, 0xb1, 0x46, 0x6c, 0x02, 0x36, 0x19, 0xc6, 0xd6, 0xd4, 0x9a, 0x8d,
	0x16, 0xee, 0xbc, 0xdd, 0xcf, 0x09, 0xe4, 0x86, 0xb3, 0x09, 0x78, 0x1f, 0x5c, 0x1d, 0x4e, 0xa5,
	0xaa, 0xd5, 0x19, 0xc7, 0xdd, 0xa9, 0x35, 0x73, 0x73, 0x20, 0xb4, 0xd3, 0x84, 0x3d, 0x02, 0x54,
	0x5c, 0xf1, 0x92, 0x22, 0xc6, 0x3d, 0xea, 0xbb, 0x9a, 0x50, 0x40, 0xf0, 0x06, 0x4e, 0x8e, 0xb2,
	0x6d, 0x2e, 0x92, 0xac, 0xb5, 0x2c, 0xe5, 0xe7, 0xe1, 0x80, 0x52, 0x52, 0xa2, 0x93, 0xbb, 0xb5,
	0x2c, 0x0c, 0x60, 0x77, 0x60, 0xa3, 0x10, 0x8d, 0xb8, 0x86, 0x18, 0x11, 0x6c, 0xc0, 0xa3, 0x49,
	0xab, 0xfa, 0xac, 0x50, 0xb0, 0x7b, 0x70, 0x28, 0xa9, 0xac, 0x2b, 0x9a, 0xe0, 0xe6, 0xff, 0x48,
	0x27, 0x15, 0x7b, 0x82, 0x21, 0x3f, 0x1e, 0x05, 0x1e, 0xb9, 0x42, 0xdd, 0x36, 0x63, 0xbc, 0x1b,
	0x4b, 0xaa, 0x67, 0x7e, 0x5d, 0x97, 0x0d, 0xc1, 0x89, 0xc2, 0x22, 0x8e, 0xc2, 0xed, 0xd6, 0xef,
	0xb0, 0x11, 0x40, 0x14, 0x16, 0x9b, 0x78, 0x47, 0xda, 0xd2, 0xdd, 0x55, 0x96, 0x19, 0xd5, 0x65,
	0x00, 0x83, 0x28, 0x7b, 0x4f, 0xd2, 0xb5, 0xdf, 0x63, 0x0e, 0xf4, 0xd7, 0xd9, 0x76, 0xe5, 0xf7,
	0x35, 0x4d, 0xc3, 0x62, 0x19, 0xe6, 0xbe, 0xad, 0xeb, 0x5d, 0x9c, 0xa6, 0x49, 0xe1, 0x0f, 0x16,
	0x08, 0x5e, 0xa1, 0x23, 0xa4, 0x39, 0xf0, 0x0b, 0xb8, 0x6b, 0x54, 0x54, 0x4b, 0xf6, 0x5f, 0x9f,
	0xf7, 0xd7, 0x36, 0x0f, 0x43, 0x0d, 0x7e, 0xee, 0x13, 0x74, 0xd8, 0x0c, 0xbc, 0xa5, 0x40, 0xae,
	0xd0, 0x3c, 0x76, 0x6f, 0xfe, 0xbf, 0xce, 0xfd, 0x80, 0x3e, 0xf3, 0xf5, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xde, 0x42, 0x7d, 0xb9, 0xe0, 0x01, 0x00, 0x00,
}
